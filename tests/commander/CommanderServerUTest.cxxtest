/*
 * @file tests/planning/CommanderServerUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>
#include <opencog/truthvalue/TruthValue.h>
#include <opencog/commander/CommanderServer.h>
#include <opencog/commander/WebSocketIO/Client.h>
#include <stdio.h>
#include <map>
#include <pthread.h>
#include <unistd.h>
#include <opencog/commander/sole/sole.hpp>
#include <opencog/commander/WebSocketIO/json/json.hpp>
#include <iostream>
#include <fstream>
#include <iomanip>
using json = nlohmann::json;

using namespace opencog;
using namespace std;

#define COMMANDER_TEST_PATH PROJECT_SOURCE_DIR "/tests/commander"
#define CHKERR                                 \
    TSM_ASSERT("Caught scm error during eval", \
               (false == _scm->eval_error()));

void *PrintHello(void *threadid)
{
    long tid;
    tid = (long)threadid;
    printf("Hello World! It's me, thread #%ld!\n", tid);
    pthread_exit(NULL);
}

class CommanderServerUTest : public CxxTest::TestSuite
{
  private:
    AtomSpace *_as;
    SchemeEval *_scm;

  public:
    CommanderServerUTest()
    {
        _as = new AtomSpace();
        _scm = new SchemeEval(_as);

        // The scheme environment is reset between each test.
        // Configure scheme load-paths that are common for all tests.
        // _scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
        // CHKERR

        // // Load required modules for testing and populate the atomspace
        // _scm->eval("(use-modules (opencog) (opencog openpsi))");
        // CHKERR
        // _scm->eval("(load \"" OPENPSI_TEST_PATH "/rules.scm\")");
        // CHKERR

        logger().set_level(Logger::DEBUG);
        logger().set_print_level_flag(true);
        logger().set_print_to_stdout_flag(true);

        std::thread t1 = std::thread([]() {
            CommanderServer *server = new CommanderServer();
            //server->port = 8000;
            server->scm_file = "/opencog/opencog/tests/commander/foo.scm";
            server->start_server();
        });
        t1.detach();
    }

    ~CommanderServerUTest()
    {
        // Clean Up
        delete _as;
        _as = nullptr;
        delete _scm;
        _scm = nullptr;

        // Erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    // Each test continuese from the state created by the previous one.
    void setUp() {}
    void tearDown() {}

    // Check the ctest foo?
    void test_foo()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        TSM_ASSERT_EQUALS("Expected `#t`", 1, 1);

        logger().info("END TEST: %s", __FUNCTION__);
        
    }

    // check start commander server
    // void test_invoke_rpc()
    // {
    //     logger().info("BEGIN TEST: %s", __FUNCTION__);

    //     string method = "foo";
    //     string params = "[\"hello\"]";
    //     string expect_result = "hello world";

    //     std::thread t = std::thread([]() {
    //         auto client = new Client("127.0.0.1", 8000);

    //         client->on("connection", [client](JSON) {
    //             client->on("rpc-execute!", [&client](JSON data) {
    //                 string json_str = std::string("") +
    //                                   "{\"method\":" + "\"foo\"" +
    //                                   ",\"guid\":" + "\"" + data.at("guid").get<std::string>() + "\"" +
    //                                   ",\"result\":" + "\"" + "hello world" + "\"" +
    //                                   ",\"params\":" + "[\"hello\"]" + "}";
    //                 cout << "client send json_str: " << json_str << endl;
    //                 client->send("rpc-result!", json::parse(json_str));
    //             });

    //             client->send("invoke-rpc-execute!", json::parse(std::string("") +
    //                                                             "{\"method\":" + "\"foo\"" +
    //                                                             ",\"guid\":" + "\"" + sole::uuid0().str() + "\"" +
    //                                                             ",\"params\":" + "[\"hello\"]" + "}"));
    //             client->on("invoke-rpc-result!", [&client](JSON data) {
    //                 cout << "recive invoke-rpc-result!: " << data.dump() << endl;

    //                 ofstream out("/tmp/commander-utest");
    //                 if (out.is_open())
    //                 {
    //                     out << data.at("result").get<std::string>();
    //                     out.close();
    //                     cout << "write to file success! " << endl;
    //                 }
    //                 else
    //                 {
    //                     cout << "cant't write file! " << endl;
    //                 }

    //             });
    //         });

    //         client->poll(200);
    //     });
    //     t.detach();

    //     string result;

    //     while (true)
    //     {
    //         sleep(1);
    //         ifstream in("/tmp/commander-utest");
    //         if (in.is_open())
    //         {
    //             getline(in, result);
    //             in.close();
    //             break;
    //         }
    //         else
    //         {
    //             cout << "cant't read file! " << endl;
    //         }
    //     }
    //     cout << "assert result: " << result << endl;
    //     TSM_ASSERT_EQUALS("Expected `#t`", "hello world", result);
    //     logger().info("END TEST: %s", __FUNCTION__);
    // }

    void test_run_psi()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        TSM_ASSERT_EQUALS("Expected `#t`", 1, 1);

        string guid = sole::uuid0().str();

        std::thread t = std::thread([&guid]() {
            auto client = new Client("127.0.0.1", 8000);

            client->on("connection", [client,&guid](JSON) {
                client->on("rpc-execute!", [&client,&guid](JSON data) {
                    string json_str = std::string("") +
                                      "{\"method\":" + "\"foo\"" +
                                      ",\"guid\":" + "\"" + data.at("guid").get<std::string>() + "\"" +
                                      ",\"result\":" + "\"" + "hello world" + "\"" +
                                      ",\"params\":" + "[\"hello\"]" + "}";
                    cout << "client send json_str: " << json_str << endl;
                    client->send("rpc-result!", json::parse(json_str));
                    ofstream out("/tmp/" + guid);
                    if (out.is_open())
                    {
                        out << "success";
                        out.close();
                        cout << "write to file success! " << endl;
                    }
                    else
                    {
                        cout << "cant't write file! " << endl;
                    }
                });

                client->send("psi-run!", "");
                client->on("psi-run-result!", [&client](JSON data) {
                    cout << "recive psi-run-result!: " << data.dump() << endl;
                });
            });

            client->poll(200);
        });
        t.detach();

        string result;
        while (true)
        {
            sleep(1);
            ifstream in("/tmp/"+guid);
            if (in.is_open())
            {
                getline(in, result);
                in.close();
                break;
            }
            else
            {
                cout << "cant't read file! " << endl;
            }
        }

        TSM_ASSERT_EQUALS("Expected `#t`", "success", result);

        logger().info("END TEST: %s", __FUNCTION__);
    }
};
