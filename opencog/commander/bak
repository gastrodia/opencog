 map<string, string> result_map = {};
    result_map["abc"] = "cba";
    cout << "result_map: " << &result_map << endl;

    cout << "test atomspace" << endl;

    AtomSpace *as = new AtomSpace();
    SchemeEval *scm = new SchemeEval(as);
    cout << "(add-to-load-path \"/usr/local/share/opencog/scm\")" << endl;
    scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");

    // Load required modules for testing and populate the atomspace
    cout << "(use-modules (opencog))" << endl;
    scm->eval("(use-modules (opencog))");
    // cout << "(ConceptNode \"abc\")" << endl;
    // scm->eval("(ConceptNode \"abc\")");
    // cout << "(prt-atomspace)" << endl;
    // cout << as->to_string() << endl;
    // cout << "finish test" << endl;

    string simple_result;

    auto update_map = [&result_map](string &guid, string &result) {

        cout << "result_map: " << &result_map << endl;

        result_map[guid] = result;
        cout << "update result_map success! " << endl;
    };

    auto update_as = [&as, &scm, &simple_result](string &guid, string &result) {
        //scm->eval(std::string("") + "(ConceptNode \"" + guid + "\")");
        //cout << as->to_string() << endl;

        simple_result = result;
        cout << "update _as success! " << endl;

    };